@namespace MfePoc.Home.Views.Home
@using Microsoft.AspNetCore.Hosting
@inject IWebHostEnvironment WebHostEnvironment
@{
    this.SetAppLayout(
        title: "Home Page",
        baseUrl: null);
}

<h1 class="display-4">Welcome</h1>
<p>
    A proof of concept demonstrating mixing:
    <ul>
        <li>Traditional MVC (i.e., server-side .cshtml);</li>
        <li>Blazor server-side;</li>
        <li>Blazor client-side.</li>
    </ul>
</p>
<p>
    Each technology is hosted in its own process.
</p>
<p>
    GitHub repository:
    <a href="https://github.com/FlukeFan/MfePoc" target="mfepoc_github">open in new window</a>
</p>
<p>
    AppVeyor build:
    <a href="https://ci.appveyor.com/project/FlukeFan/mfepoc" target="mfepoc_appveyor">
        <img src="https://ci.appveyor.com/api/projects/status/github/FlukeFan/mfepoc?svg=true" alt="Project Badge">
    </a>
</p>
<p>
    This was rendered from process Id=@System.Diagnostics.Process.GetCurrentProcess().Id Framework=@System.Runtime.InteropServices.RuntimeInformation.FrameworkDescription
</p>

@section Scripts {
    <script>
        $(function () {
            // 'touch' each of the other projects to start the processes up eagerly
            @foreach (var warmupUrl in IndexModel.WarmupUrls(WebHostEnvironment))
            {
                @:$.ajax('@warmupUrl');
            }
        });
    </script>
}