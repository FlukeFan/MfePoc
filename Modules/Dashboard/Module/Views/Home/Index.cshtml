@using MfePoc.Generation.Contract
@using MfePoc.Mixing.Contract
@using MfePoc.Sales.Contract
@using MfePoc.Reporting.Contract
@{
    this.SetAppLayout(
        title: "Dashboard",
        baseUrl: "/Dashboard/",
        customScript: "/Dashboard/lib/signalr/signalr.min.js");
}

<p>
    This is the colour factory Dashboard.
</p>
<p>
    The main view is rendered using server-side MVC, but the colour controls are served (in iFrames) from
    the other modules.
</p>

<div class="container">

    <div class="row">

        <div class="col-sm-6">
            @GenerationControls.ColourGenerators()
        </div>

        <div class="col-sm-6">
            @GenerationControls.StockLevels()
        </div>

    </div>

    <div class="row">

        <div class="col-sm-6">
            @MixingControls.Mixers()
        </div>

        <div class="col-sm-6">
            @MixingControls.StockLevels()
        </div>

    </div>

    <div class="row">
        <div class="col-sm-12">
            @SalesControls.SellControls()
        </div>
    </div>

    <div class="row">
        <div id="lazyReport" class="col-sm-12">
            <button class="btn btn-primary" onclick="loadReport();">Load Report</button>
        </div>
    </div>

</div>

Bus messages:
<div class="container row">
    <div class="col-12">
        <textarea id="messages" rows="6" cols="80" style="font-size: smaller; height: 120px; width:100%"></textarea>
    </div>
</div>

<p>
    This page was rendered from process Id=@System.Diagnostics.Process.GetCurrentProcess().Id Framework=@System.Runtime.InteropServices.RuntimeInformation.FrameworkDescription
</p>

@section Scripts {
    <script>

        var reportHtml = '@ReportingControls.Report()';

        function loadReport() {
            $('#lazyReport').html(reportHtml);
        }

        $(function () {
            var hub = new signalR.HubConnectionBuilder()
                .withUrl("/Dashboard/hub")
                .withAutomaticReconnect({ nextRetryDelayInMilliseconds: function () { return 500; } })
                .build();

            hub.on("notify", function (message) {
                notify(message);
            });

            hub.start().then(function () {
                notify("Dashboard started");
            });

            hub.onreconnecting(function () {
                notify('SignalrR connection lost; reconnecting');
            });

            hub.onreconnected(function () {
                notify('SignalrR reconnected');
            });
        });

        function notify(message) {
            var text = $('#messages').text();
            var message = formatDate(message);
            text = text.split('\n')[0] ? message + '\n' + text : message;
            $('#messages').text(text);
            window.setTimeout(clearMessage, 7000);
        }

        function clearMessage() {
            var text = $('#messages').text();
            var lines = text.split('\n');
            lines.pop();
            text = lines.join('\n');
            $('#messages').text(text);
        }

        function formatDate(message) {
            var date = new Date();
            var hours = leadingZero(date.getHours());
            var minutes = leadingZero(date.getMinutes());
            var seconds = leadingZero(date.getSeconds());
            var time = hours + ':' + minutes + ':' + seconds + '.' + trailingZeros(date.getMilliseconds());
            return time + ' - ' + message;
        }

        function leadingZero(value) {
            return value < 10 ? '0' + value : value;
        }

        function trailingZeros(value) {
            value = '' + value;

            while (value.length < 3) {
                value = value + '0';
            }

            return value;
        }

    </script>
} 