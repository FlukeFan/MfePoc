@implements IDisposable
@inject IJSRuntime Js
@inject NavigationManager NavManager

@if (_sales != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Date/Time</th>
                <th>Description</th>
                <th style="text-align:right;">Amount</th>
            </tr>
        </thead>
        <tbody>
            @if (_sales.Items?.Count == 0)
            {
                <tr>
                    <td colspan="3" style="text-align: center;">No sales executed.</td>
                </tr>
            }
            else
            {
                @foreach (var sale in _sales.Items)
                {
                    <tr>
                        <td>@sale.WhenUtc.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss")</td>
                        <td>@sale.Description</td>
                        <td style="text-align:right;">@($"£{sale.Amount:0\\.00}")</td>
                    </tr>
                }
            }
        </tbody>
        <thead>
            <tr>
                <th colspan="2"></th>
                <th style="padding-top:20px; text-align:right;">Total</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td colspan="2"></td>
                <td style="text-align:right;">@($"£{_sales.Total:0\\.00}")</td>
            </tr>
        </tbody>
    </table>
}

@code {

    private ClientHub _hub;
    private ClientHub.Sales _sales;

    protected override async Task OnInitializedAsync()
    {
        _hub = await ClientHub.GetStartedHubAsync(NavManager);
        _hub.OnReportUpdateAsync += Refresh;
        await Refresh();
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        await Js.InvokeVoidAsync("resizeIframe");
    }

    private async Task Refresh()
    {
        _sales = await _hub.RequestSalesAsync();
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        _hub.OnReportUpdateAsync -= Refresh;
    }
}
