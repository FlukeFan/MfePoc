@implements IDisposable
@inject IJSRuntime Js
@inject StockDb StockDb
@using Shared
<p>
    Current colour exchange rate (between £0.50 and £1.50): @_currentWorth.ExchangeRate.FormatGBP()
    <ul>
        <li>@_currentWorth.WhitePackageCount x White Package (@_currentWorth.UnitWhitePackageWorth.FormatGBP() per package) = @_currentWorth.WhitePackageWorth.FormatGBP()</li>
        <li>@_currentWorth.YellowPackageCount x Yellow Package (@_currentWorth.UnitColourPackageWorth.FormatGBP() per package) = @_currentWorth.YellowPackageWorth.FormatGBP()</li>
        <li>@_currentWorth.CyanPackageCount x Cyan Package (@_currentWorth.UnitColourPackageWorth.FormatGBP() per package) = @_currentWorth.CyanPackageWorth.FormatGBP()</li>
        <li>@_currentWorth.MagentaPackageCount x Magenta Package (@_currentWorth.UnitColourPackageWorth.FormatGBP() per package) = @_currentWorth.MagentaPackageWorth.FormatGBP()</li>
    </ul>
</p>

<p>
    Total: @_currentWorth.TotalWorth.FormatGBP()
</p>

<button class="btn btn-primary" @onclick=Sell disabled=@(_currentWorth.TotalWorth == 0m)>Sell</button>

@code {
    private StockDb.CurrentWorth _currentWorth;

    protected override async Task OnInitializedAsync()
    {
        StockDb.OnStockUpdateAsync += Refresh;
        await Refresh();
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        await Js.InvokeVoidAsync("resizeIframe");
    }

    void IDisposable.Dispose()
    {
        StockDb.OnStockUpdateAsync -= Refresh;
    }

    private async Task Refresh()
    {
        _currentWorth = StockDb.CalculateCurrentWorth();
        await InvokeAsync(StateHasChanged);
    }

    private async Task Sell()
    {
        await StockDb.SellAsync(_currentWorth);
    }
}
